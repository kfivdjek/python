from tkinter import *   // библиотека для работы с графичесиким интерфейсом
import random   // библиотека для выбора случайных элементов
from tkinter.messagebox import *  // модуль в tkinter, который предоставляет функции для отображения диалоговых окон с сообщениями, предупреждениями, вопросами
root = Tk()
root.title('Крестики Нолики')
root.geometry('300x295+620+180')  // создание главного окна, заголовка и размеров
games=[] // список хранения кнопок игрового поля
choice = 0 // отпределяет кто начнёт
combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)] // выйгрышние комбинации
def new_game():  // инициализация новой игры
    global run_game, win, condition, games, button1 //   используем их для контроля состояния игры и кнопок. 
    if games!=[]:  
        for i in range(3):
            for j in range(3): games[i][j].grid_forget() // Проверяем, есть ли уже существующая игра. Если список games не пуст, это значит, что игра уже была начата.
        button1.grid_forget()
        games=[]
        return fig() //Здесь мы также убираем кнопку "Новая игра" и очищаем список games. Функция fig() вероятно возвращает интерфейс к начальному состоянию или настраивает его.
    run_game = True // означает что игра продолжается
    condition = [None] * 9 // означает проедставляет список из 9 клеток и показывает что игроки не сделали ход
    win = None // означает что на данный момент нету победителя
    games = [] // список игр очищен
    root.columnconfigure(index=2,weight=50) // используется для управления распределением пространства в интерфейсе. Она указывает, что столбец с индексом 2 (где бот будет выполнять свои ходы) будет занимать 50% свободного пространства.
    for i in range(3): // отвечает за строки
        row = []
        for j in range(3): //   отвечает за столбцы.  В результате создаётся игровое поле размера 3x3 в виде кнопок.
            button = Button(root, text="", width=10, height=5, command=lambda row=i, col=j: click(row, col)) //Этот параметр устанавливает функцию, которая будет вызываться при нажатии на кнопку. Используется lambda, чтобы зафиксировать значения row и col в момент создания кнопки.
            button.grid(row=i, column=j,sticky='ew') //- button.grid(row=i, column=j, sticky='ew'): //Метод grid() используется для размещения кнопки в сетке по координатам (i, j). Параметр sticky='ew' позволяет кнопке растягиваться по горизонтали, что улучшает внешний вид интерфейса.
            row.append(button) // Кнопка добавляется в список row, который временно хранит кнопки текущей строки.
        games.append(row) // После завершения внутреннего цикла, вся строка с кнопками добавляется в основной список games
    button1 = Button(root,font='9', text="Новая игра", command=new_game)
    button1.grid(row = 3, column=0,columnspan=3, sticky='nswe')
    if choice == 0:bot_move() // Создается кнопка для начала новой игры:
def add_x(row, col): 
    games[row][col]['text'] = 'X'
    games[row][col]['state'] = 'disabled'
def add_o(row, col):
    games[row][col]['text'] = 'O'
    games[row][col]['state'] = 'disabled' //замена текста на кнопках на "X" или "O",отключение кнопки , чтобы после хода игрока на неё нельзя было нажать еще раз.
def click(row, col): //эта функция управляет логикой, связанной с кликами на кнопки (ячейки) игрового поля.
    global choice // глобальная переменная, определояющая что выбрал игрок x или 0
    if run_game:
        index = row * 3 + col # Вычисление индекса клетки
        if condition[index] is None: # Проверяем, свободна ли клетка
            if choice == 1: # Если игрок выбрал "X"
                condition[index] = 1 # Обновляем состояние для "X"
                add_x(row, col)  # Добавляем "X" на кнопку
                if winner():  # Проверяем на победу
                    end_game()# Завершение игры, если игрок выиграл
                else:  # Если победы нет
                    bot_move() # Ход бота
                    if winner():# Проверяем на победу снова
                        end_game() # Завершение игры, если бот выиграл
            elif choice == 0:  # Если игрок выбрал "O"
                condition[index] = 0 # Обновляем состояние для "O"
                print(condition) # Вывод текущего состояния на консоль
                add_o(row, col)  # Добавляем "O" на кнопку
                if winner():end_game()  # Проверяем на победу  # Завершение игры, если игрок выиграл
                else:# Если победы нет
                    bot_move() # Ход бота
                    if winner():end_game()  # Проверяем на победу снова # Завершение игры, если бот выиграл
    else:new_game()  # Если игра не идет # Запускаем новую игру
def bot_move():   // Эта функция реализует логику, позволяющую боту принимать решения о том, куда сделать ход на основе текущего состояния игрового поля.
    index = None // Если бот найдет подходящую клетку, index изменится на соответствующий индекс.
    for i in combinations: // это список всех возможных выигрышных комбинаций
        variants = (([condition[i[0]], condition[i[1]], condition[i[2]]]))
        if variants.count(1-choice) == 2 and variants.count(None) == 1:
            index = i[variants.index(None)]
            break
    if index is None:
        for i in combinations:
            variants = (([condition[i[0]], condition[i[1]], condition[i[2]]]))
            if variants.count(choice) == 2 and variants.count(None) == 1:
                index = i[variants.index(None)]
                break
    if index is None:
        for i in combinations:
            variants = (([condition[i[0]], condition[i[1]], condition[i[2]]]))
            if variants.count(1-choice) == 1 and variants.count(None) == 2:
                index = i[variants.index(None)]
                break
    if index is None:
        if condition[4] is None:
            index = 4
    if index is None:
        empty_indexes = []
        for i in range(0, 9, 2):
            if condition[i] is None:
                empty_indexes.append(i)
        if empty_indexes:
            index = random.choice(empty_indexes)
    if index is None:
        empty_indexes = []
        for index, el in enumerate(condition):
            if el is None:
                empty_indexes.append(index)
        if empty_indexes:
            index = random.choice(empty_indexes)
    condition[index] = 1-choice
    row = index // 3
    col = index % 3
    if choice==0: add_x(row, col)
    else: add_o(row, col)
def winner():
    global win
    variants = []
    for i in combinations: variants.append([condition[i[0]], condition[i[1]], condition[i[2]]])
    if [choice] * 3 in variants:win = 'Ты ПОБЕДИЛ!'
    elif [1-choice] * 3 in variants:win = 'Бот Выиграл'
    elif None not in condition:win = 'Ничья'
    return win
def end_game():
    global run_game,games
    run_game = False
    for row in games:
        for button in row:button['state'] = 'disabled'
    showinfo("Игра окончена", win)
    for i in range(3):
        for j in range(3):games[i][j].grid_forget()
    button1.grid_forget()
    games=[]
    fig()
def choose_x():
    global choice
    choice = 1
    new_game()
def choose_o():
    global choice
    choice = 0
    new_game()
def fig():
    root.columnconfigure(index=0,weight=50)
    root.columnconfigure(index=1,weight=50)
    root.columnconfigure(index=2,weight=0)
    Label(root, text="Выберите фигуру:",font='9').grid(row=0, column=0, columnspan=2)
    Button(root, text="X", font='9', command=choose_x).grid(row = 1, column = 0, sticky='ew',)
    Button(root, text="O", font='9', command=choose_o).grid(row = 1, column = 1, sticky='ew')
fig()
root.mainloop()
