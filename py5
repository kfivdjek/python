'''Задана рекуррентная функция. Область определения функции – натуральные числа. Написать 
программу сравнительного вычисления данной функции рекурсивно и итерационно. Определить 
границы применимости рекурсивного и итерационного подхода. Результаты сравнительного 
исследования времени вычисления представить в табличной форме. Обязательное требование – 
минимизация времени выполнения и объема памяти.
29.	F(1) = 1; F(2) = 2; F(n) = (-1)n*(F(n-1)- F(n-2) /(n+2)! при n > 2. '''
from math import factorial
import timeit
fact=2*3*4*5
n=input('F(1) = 1; F(2) = 2; F(n) = (-1)^n*(F(n-1)-F(n-2)/(n+2)!\nВведите натуральное число n, которое будет использоваться для вычисления функции: ')
while True:
    try: n = int(n)
    except: n = input('Вы неправильно ввели n. Введите натуральное число n: ')
    else: 
        if n>2: break
        else: n = input('Вы неправильно ввели n. Введите натуральное число n > 2: ')
def recursive_f(n):
    if n==1: return 1
    elif n==2: return 2
    else: return -(recursive_f(n-1)-recursive_f(n-2)/factorial(n+2))    
def iterative_f(n, fact):
    if n==1: f=1
    elif n==2: f=2
    else:
        f_2,f_1=1,2
        for i in range(3,n+1):
            f = -(f_1 - f_2/fact)
            f_2,f_1 = f_1,f    
            fact *=(i+3)            
    return f
def compare_methods(n):
    print(f"n: {n}")
    a = timeit.timeit('recursive_f(n)', globals = globals(), number =1)
    print(f'Рекурсивный результат: {recursive_f(n)} \nВремя рекурсивного вычисления: {a}')
    a = timeit.timeit('iterative_f(n, fact)', globals = globals(), number =1)
    print(f'Итерационный результат: {iterative_f(n, fact)} \nВремя итерационного вычисления: {a}')
compare_methods(n)
